{"version":3,"sources":["../assets/manager.js","../assets/strategies.js","../runner/api/itemRunner.js","module-create.js"],"names":[],"mappings":"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","sourcesContent":["define('taoItems/assets/manager',['lodash', 'util/url'], function (_, urlUtil) { 'use strict';\n\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    urlUtil = urlUtil && Object.prototype.hasOwnProperty.call(urlUtil, 'default') ? urlUtil['default'] : urlUtil;\n\n    /*\n     * This program is free software; you can redistribute it and/or\n     * modify it under the terms of the GNU General Public License\n     * as published by the Free Software Foundation; under version 2\n     * of the License (non-upgradable).\n     *\n     * This program is distributed in the hope that it will be useful,\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n     * GNU General Public License for more details.\n     *\n     * You should have received a copy of the GNU General Public License\n     * along with this program; if not, write to the Free Software\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n     *\n     * Copyright (c) 2015-2019 (original work) Open Assessment Technologies SA;\n     *\n     */\n\n    /**\n     * @typedef AssetStrategy Defines a way to resolve an asset path\n     * @property {String} name - the strategy name\n     * @property {assetStrategyHandle} handle - how to resolve the strategy.\n     */\n\n    /**\n     * @callback assetStrategyHandle\n     * @param {String|Object} url - the URL to resolved. If parseUrl, it's an object that contains host, port, search, queryString, etc.\n     * @param {Object} data - the context data\n     * @returns {String?} falsy if not resolved otherwise the resolved URL\n     */\n\n    /**\n     * Check if the given object is a valid AssetStrategy\n     * @param {AssetStrategy} strategy\n     * @throws {TypeError}\n     */\n    var checkStrategy = function checkStrategy(strategy) {\n        if (!_.isPlainObject(strategy) || !_.isFunction(strategy.handle) || !_.isString(strategy.name)) {\n            throw new TypeError('An asset resolution strategy is an object with a handle method and a name');\n        }\n    };\n\n    /**\n     * The assetManagerFactory create a new assetManager with the given resolution strategies and a data context.\n     *\n     * @example\n     *   //define AssetStrategies with a name and a handle method\n     *   var strategies = [{\n     *       name : 'external',\n     *       handle : function(url, data){\n     *           if(/^http/.test(url)){\n     *               return path;\n     *           }\n     *       }\n     *   }, {\n     *       name : 'relative',\n     *       handle : function(url, data){\n     *           if(/^((\\.\\/)|(\\w\\/))/){\n     *               return data.baseUrl + '/' + url ;\n     *           }\n     *       }\n     *   }]);\n     *\n     *   var assetManager = assetManagerFactory(strategies, { baseUrl : 'http://t.oa/public/assets/' });\n     *   assetManager.resolve('http://foo/bar.png'); //will resolved using external\n     *   assetManager.resolve('bar.png'); //will resolved using relative strategy\n     *\n     * @param {AssetStrategy[]} strategies - the strategies\n     * @param {Object} data - the context data\n     * @param {Object} [options] - the manager options\n     * @param {Boolean} [options.parseUrl = true] - If the URL to give to the strategies should be parsed or given as it is.\n     * @param {Boolean} [options.cache] - resolve the same URL only once and store the result in memory.\n     *\n     * @exports taoItems/assets/manager\n     * @namespace assetManagerFactory\n     * @returns {Object} Asset manager\n     */\n    var assetManagerFactory = function assetManagerFactory(strategies, data, options) {\n        var cache = {},\n            assetManager;\n\n        strategies = _.isArray(strategies) ? strategies : [strategies];\n        data = data || {};\n        options = _.defaults(options || {}, {\n            parseUrl: true\n        });\n\n        /**\n         * A brand new asset manager is created by the factory\n         */\n        assetManager = {\n            /**\n             * The stack of strategies that would be used to resolve the asset path\n             * @type {AssetStrategy[]}\n             */\n            _strategies: [],\n\n            /**\n             * Add an asset resolution strategy at the end of the stack.\n             * The strategies will be evaluated in the order they've been added.\n             * @param {AssetStrategy} strategy - the strategy to add\n             * @throws {TypeError} if the strategy isn't defined correctly\n             */\n            addStrategy: function addStrategy(strategy) {\n                checkStrategy(strategy);\n\n                this._strategies.push(strategy);\n            },\n\n            /**\n             * Add an asset resolution strategy at the beginning of the stack.\n             * The strategies will be evaluated in the order they've been added.\n             * @param {AssetStrategy} strategy - the strategy to add\n             * @throws {TypeError} if the strategy isn't defined correctly\n             */\n            prependStrategy: function prependStrategy(strategy) {\n                checkStrategy(strategy);\n\n                this._strategies.unshift(strategy);\n            },\n\n            /**\n             * Change the strategies\n             * @param {AssetStrategy[]} strategies - the strategies\n             * @throws {TypeError} if the strategy isn't defined correctly\n             */\n            setStrategies: function setStrategies(newStrategies) {\n                var self = this;\n\n                this._strategies = [];\n\n                //assign the strategies to the assetManager\n                _.forEach(newStrategies, function(strategy) {\n                    //if it's an object we add it directly\n                    if (_.isPlainObject(strategy)) {\n                        assetManager.addStrategy(strategy);\n\n                        //if it's a function, we create the strategy with a generated name\n                    } else if (_.isFunction(strategy)) {\n                        self.addStrategy({\n                            name: 'strategy_' + (self._strategies.length + 1),\n                            handle: strategy\n                        });\n                    }\n                });\n            },\n\n            /**\n             * Set context data\n             * @param {String|Object} [key] - the key of the data to set or the data values if it's an object\n             * @param {*} [value] - the value to set if a key is given\n             */\n            setData: function setData(key, value) {\n                if (_.isString(key) && typeof value !== 'undefined') {\n                    data[key] = value;\n                } else if (_.isPlainObject(key)) {\n                    data = key;\n                }\n            },\n\n            /**\n             * Get context data\n             * @param {String} [key] - if we want the value of a particular key\n             * @returns {Object|*} all the data or the propriety value if key is given\n             */\n            getData: function getData(key) {\n                if (_.isString(key)) {\n                    return data[key];\n                }\n                return data;\n            },\n\n            /**\n             * Resolve the given URL against the strategies\n             * @param {String} url - the URL to resolve\n             * @returns {String?} the resolved URL or nothing\n             */\n            resolve: function resolve(url) {\n                var resolved;\n                var inputUrl;\n\n                //if caching try to load the value from the cache\n                if (options.cache && cache.hasOwnProperty(url)) {\n                    return cache[url];\n                }\n\n                //parse the URL ?\n                inputUrl = options.parseUrl ? urlUtil.parse(url) : url;\n\n                //call strategies handlers, in their order until once returns something\n                _.forEach(this._strategies, function(strategy) {\n                    var result = strategy.handle(inputUrl, data);\n                    if (result) {\n                        resolved = result;\n                        return false;\n                    }\n                });\n\n                resolved = resolved || '';\n\n                if (options.cache) {\n                    cache[url] = resolved;\n                }\n\n                return resolved;\n            },\n\n            /**\n             * Resolve the given URL against the strategy identified by the given name\n             * @param {String} name - the strategy name\n             * @param {String} url - the URL to resolve\n             * @returns {String?} the resolved URL or nothing\n             */\n            resolveBy: function resolveBy(name, url) {\n                var inputUrl;\n                var resolved = '';\n                var strategy = _.find(this._strategies, { name: name });\n                if (strategy) {\n                    //parse the URL ?\n                    inputUrl = options.parseUrl ? urlUtil.parse(url) : url;\n                    resolved = strategy.handle(inputUrl, data);\n                }\n                return resolved;\n            },\n\n            /**\n             * When the cache is used, it could be useful to clear the cache\n             */\n            clearCache: function clearCache() {\n                if (options.cache) {\n                    cache = {};\n                }\n            }\n        };\n\n        assetManager.setStrategies(strategies);\n\n        return assetManager;\n    };\n\n    return assetManagerFactory;\n\n});\n\n","define('taoItems/assets/strategies',['util/url', 'lodash'], function (urlUtil, _) { 'use strict';\n\n    urlUtil = urlUtil && Object.prototype.hasOwnProperty.call(urlUtil, 'default') ? urlUtil['default'] : urlUtil;\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n\n    /*\n     * This program is free software; you can redistribute it and/or\n     * modify it under the terms of the GNU General Public License\n     * as published by the Free Software Foundation; under version 2\n     * of the License (non-upgradable).\n     *\n     * This program is distributed in the hope that it will be useful,\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n     * GNU General Public License for more details.\n     *\n     * You should have received a copy of the GNU General Public License\n     * along with this program; if not, write to the Free Software\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n     *\n     * Copyright (c) 2015-2019 (original work) Open Assessment Technologies SA;\n     *\n     */\n\n    /**\n     * Prepend a base to an URL\n     * @param {Object} url - a parsed URL\n     * @param {String} base - the base to prepend\n     * @param {Boolean} [slashcat = false] - remove dots, double slashes, etc.\n     * @returns {String} the URL\n     */\n    var prependToUrl = function prependToUrl(url, base, slashcat) {\n        //is slashcat we manage slash concact\n        if (slashcat === true) {\n            return (\n                base.replace(/\\/$/, '') +\n                '/' +\n                url.directory.replace(/^\\.\\//, '').replace(/^\\//, '') +\n                encodeURIComponent(url.file.replace(/^\\.\\//, '').replace(/^\\//, ''))\n            );\n        }\n\n        return base + url.directory.replace(/^\\.?\\//, '') + encodeURIComponent(url.file.replace(/^\\.?\\//, ''));\n    };\n\n    /**\n     * Unrelated strategies accessible by there name.\n     * Remember to not use the whole object, but each one in an array since the order matters.\n     *\n     * @exports taoItems/assets/strategies\n     */\n    var strategies = {\n        //the packedUrl will replace the asset with the url given in the assets part\n        //the assetManager should add the assets part to data with .setData('assets' itemData.content.assets)\n        packedUrl: {\n            name: 'packedUrl',\n            handle: function handlePackedUrl(url, data) {\n                var type;\n                if (!_.isUndefined(url.source) && !_.isUndefined(data.assets)) {\n                    type = _.findKey(data.assets, url.source);\n                    if (type && urlUtil.isAbsolute(data.assets[type][url.source])) {\n                        return data.assets[type][url.source];\n                    }\n                }\n            }\n        },\n        //the baseUrl concats the baseUrl in data if the url is relative\n        baseUrl: {\n            name: 'baseUrl',\n            handle: function handleBaseUrl(url, data) {\n                if (typeof data.baseUrl === 'string' && urlUtil.isRelative(url)) {\n                    return prependToUrl(url, data.baseUrl, data.slashcat);\n                }\n            }\n        },\n\n        //bust the cache for item CSS\n        itemCssNoCache: {\n            name: 'itemCssNoCache',\n            handle: function handleItemCss(url, data) {\n                if (typeof data.baseUrl === 'string' && urlUtil.isRelative(url) && /\\.css$/.test(url.file)) {\n                    return urlUtil.build(prependToUrl(url, data.baseUrl, data.slashcat), { bust: Date.now() });\n                }\n            }\n        },\n\n        //absolute URL are just left intact\n        external: {\n            name: 'external',\n            handle: function handleExternal(url) {\n                if (urlUtil.isAbsolute(url)) {\n                    return url.toString();\n                }\n            }\n        },\n\n        //the base64 encoded resources are also left intact\n        base64: {\n            name: 'base64',\n            handle: function handleB64(url) {\n                if (urlUtil.isBase64(url)) {\n                    return url.toString();\n                }\n            }\n        },\n\n        //special tao media protocol\n        taomedia: {\n            name: 'taomedia',\n            handle: function handleTaoMedia(url, data) {\n                //either a baseUrl is given or if empty, taomedia resources are managed as relative resources\n                var baseUrl = data.baseUrl || './';\n                if ((typeof url === 'object' && url.protocol === 'taomedia') || /^taomedia:\\/\\//.test(url.toString())) {\n                    return baseUrl + url.toString();\n                }\n            }\n        }\n    };\n\n    return strategies;\n\n});\n\n","define('taoItems/runner/api/itemRunner',['jquery', 'lodash', 'core/eventifier', 'taoItems/assets/manager'], function ($, _, eventifier, assetManagerFactory) { 'use strict';\n\n    $ = $ && Object.prototype.hasOwnProperty.call($, 'default') ? $['default'] : $;\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    eventifier = eventifier && Object.prototype.hasOwnProperty.call(eventifier, 'default') ? eventifier['default'] : eventifier;\n    assetManagerFactory = assetManagerFactory && Object.prototype.hasOwnProperty.call(assetManagerFactory, 'default') ? assetManagerFactory['default'] : assetManagerFactory;\n\n    /*\n     * This program is free software; you can redistribute it and/or\n     * modify it under the terms of the GNU General Public License\n     * as published by the Free Software Foundation; under version 2\n     * of the License (non-upgradable).\n     *\n     * This program is distributed in the hope that it will be useful,\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n     * GNU General Public License for more details.\n     *\n     * You should have received a copy of the GNU General Public License\n     * along with this program; if not, write to the Free Software\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n     *\n     * Copyright (c) 2014-2019 (original work) Open Assessment Technlogies SA (under the project TAO-PRODUCT);\n     *\n     */\n\n    /**\n     *\n     * Builds a brand new {@link itemRunner}.\n     *\n     * <strong>The factory is an internal mechanism to create encapsulated contexts.\n     *  I suggest you to use directly the name <i>itemRunner</i> when you require this module.</strong>\n     *\n     * @example require(['itemRunner'], function(itemRunner){\n     *            itemRunner({itemId : 12})\n     *                    .on('statechange', function(state){\n     *\n     *                    })\n     *                    .on('ready', function(){\n     *\n     *                    })\n     *                    .on('response', function(){\n     *\n     *                    })\n     *                   .init()\n     *                   .render($('.item-container'));\n     *          });\n     *\n     * @exports itemRunner\n     * @namespace itemRunnerFactory\n     *\n     * @param {String} [providerName] - the name of a provider previously registered see {@link itemRunnerFactory#register}\n     * @param {Object} [data] - the data of the item to run\n     * @param {Object} [options]\n     *\n     * @returns {itemRunner}\n     */\n    var itemRunnerFactory = function itemRunnerFactory(providerName, data, options) {\n        var provider, providers, assetManager;\n\n        //flow structure to manage sync calls in an async context.\n        var flow = {\n            init: {\n                done: false,\n                pending: []\n            },\n            render: {\n                done: false,\n                pending: []\n            }\n        };\n\n        //optional params based on type\n        if (_.isPlainObject(providerName)) {\n            data = providerName;\n            providerName = undefined;\n        }\n\n        data = data || {};\n        options = options || {};\n\n        /*\n         * Select the provider\n         */\n        providers = itemRunnerFactory.providers;\n\n        //check a provider is available\n        if (!providers || _.size(providers) === 0) {\n            throw new Error('No provider regitered');\n        }\n\n        if (_.isString(providerName) && providerName.length > 0) {\n            provider = providers[providerName];\n        } else if (_.size(providers) === 1) {\n            //if there is only one provider, then we take this one\n            providerName = _.keys(providers)[0];\n            provider = providers[providerName];\n        }\n\n        //now we should have a provider\n        if (!provider) {\n            throw new Error('No candidate found for the provider');\n        }\n\n        //set up a default assetManager using a \"do nothing\" strategy\n        assetManager =\n            options.assetManager ||\n            assetManagerFactory(function defaultStrategy(url) {\n                return url.toString();\n            });\n\n        /**\n         * The itemRunner\n         * @typedef {Object} itemRunner\n         */\n\n        /**\n         * @type {itemRunner}\n         * @lends itemRunnerFactory\n         */\n        return eventifier({\n            /**\n             * Items container\n             * @type {HTMLElement}\n             */\n            container: null,\n\n            /**\n             * The asset manager used to resolve asset\n             * @see taoItems/asset/manager\n             * @type {AssetManager}\n             */\n            assetManager: assetManager,\n\n            /**\n             * To give options to the item runner provider\n             * @type {Object}\n             */\n            options: options,\n\n            /**\n             * Initialize the runner.\n             * @param {Object} [newData] - just in case you want to change item data (it should not occurs in most case)\n             * @returns {itemRunner} to chain calls\n             *\n             * @fires itemRunner#init\n             */\n            init: function(newData) {\n                var self = this;\n\n                /**\n                 * Call back when init is done\n                 */\n                var initDone = function initDone() {\n                    //manage pending tasks the first time\n                    if (flow.init.done === false) {\n                        flow.init.done = true;\n\n                        _.forEach(flow.init.pending, function(pendingTask) {\n                            if (_.isFunction(pendingTask)) {\n                                pendingTask.call(self);\n                            }\n                        });\n                        flow.init.pending = [];\n                    }\n\n                    /**\n                     * the runner has initialized correclty the item\n                     * @event itemRunner#init\n                     */\n                    self.trigger('init');\n                };\n\n                //merge data\n                if (newData) {\n                    data = _.merge(data, newData);\n                }\n\n                if (_.isFunction(provider.init)) {\n                    /**\n                     * Calls provider's initialization with item data.\n                     * @callback InitItemProvider\n                     * @param {Object} data - the item data\n                     * @param {Function} done - call once the initialization is done\n                     */\n                    provider.init.call(this, data, initDone);\n                } else {\n                    initDone();\n                }\n\n                return this;\n            },\n\n            /**\n             * Configure the assetManager\n             * @see taoItems/assets/manager\n             * @param {AssetStrategy[]} strategies - the resolving strategies\n             * @param {Object} [data] - the context data\n             * @param {Object} [options] - the asset manager options\n             * @returns {itemRunner} to chain calls\n             */\n            assets: function assets(strategies, data, options) {\n                try {\n                    this.assetManager = assetManagerFactory(strategies, data, options);\n                } catch (err) {\n                    this.trigger('error', 'Something was wrong while configuring the asset manager : ' + err);\n                }\n\n                return this;\n            },\n\n            /**\n             * Initialize the current item.\n             *\n             * @param {HTMLElement|jQueryElement} elt - the DOM element that is going to contain the rendered item.\n             * @returns {itemRunner} to chain calls\n             *\n             * @fires itemRunner#ready\n             * @fires itemRunner#render\n             * @fires itemRunner#error if the elt isn't valid\n             *\n             * @fires itemRunner#statechange the provider is reponsible to trigger this event\n             * @fires itemRunner#responsechange  the provider is reponsible to trigger this event\n             */\n            render: function(elt, options) {\n                var self = this;\n\n                /**\n                 * Call back when render is done\n                 */\n                var renderDone = function renderDone() {\n                    //manage pending tasks the first time\n                    if (flow.render.done === false) {\n                        flow.render.done = true;\n\n                        _.forEach(flow.render.pending, function(pendingTask) {\n                            if (_.isFunction(pendingTask)) {\n                                pendingTask.call(self);\n                            }\n                        });\n                        flow.render.pending = [];\n                    }\n\n                    /**\n                     * The item is rendered\n                     * @event itemRunner#render\n                     */\n                    self.trigger('render');\n\n                    /**\n                     * The item is ready.\n                     * Alias of {@link itemRunner#render}\n                     * @event itemRunner#ready\n                     */\n                    self.trigger('ready');\n                };\n\n                options = _.defaults(options || {}, { state: {} });\n\n                //check elt\n                if (!(elt instanceof HTMLElement) && !(elt instanceof $)) {\n                    return self.trigger(\n                        'error',\n                        'A valid HTMLElement (or a jquery element) at least is required to render the item'\n                    );\n                }\n\n                //set item state to restore item state after rendering if the provider enables it\n                if (options.state) {\n                    this.setState(options.state, true);\n                }\n\n                if (flow.init.done === false) {\n                    flow.init.pending.push(function() {\n                        this.render(elt, options);\n                    });\n                } else {\n                    //we keep a reference to the container\n                    if (elt instanceof $) {\n                        this.container = elt.get(0);\n                    } else {\n                        this.container = elt;\n                    }\n\n                    //the state will be applied only when the rendering is made\n\n                    if (_.isFunction(provider.render)) {\n                        /**\n                         * Calls the provider's render\n                         * @callback RendertItemProvider\n                         * @param {HTMLElement} elt - the element to render inside\n                         * @param {Function} done - call once the render is done\n                         * @param {Object} [options] - the array of options that the item runner provider may supports\n                         * @param {Object} [options.state] - pass initial item state to method render() in case the item runner provider require initial state to render\n                         */\n                        provider.render.call(this, this.container, renderDone, options);\n                    } else {\n                        renderDone();\n                    }\n                }\n\n                return this;\n            },\n\n            /**\n             * Clear the running item.\n             * @returns {itemRunner}\n             *\n             * @fires itemRunner#clear\n             */\n            clear: function() {\n                var self = this;\n\n                /**\n                 * Call back when clear is done\n                 */\n                var clearDone = function clearDone() {\n                    /**\n                     * The item is ready.\n                     * @event itemRunner#clear\n                     */\n                    self.trigger('clear');\n                };\n                if (_.isFunction(provider.clear)) {\n                    /**\n                     * Calls the provider's clear\n                     * @callback ClearItemProvider\n                     * @param {HTMLElement} elt - item's container\n                     * @param {Function} done - call once the initialization is done\n                     */\n                    provider.clear.call(this, this.container, clearDone);\n                } else {\n                    clearDone();\n                }\n\n                return this;\n            },\n\n            /**\n             * Get the current state of the running item.\n             *\n             * @returns {Object|Null} state\n             */\n            getState: function() {\n                var state = null;\n                if (_.isFunction(provider.getState)) {\n                    /**\n                     * Calls the provider's getState\n                     * @callback GetStateItemProvider\n                     * @returns {Object} the state\n                     */\n                    state = provider.getState.call(this);\n                }\n                return state;\n            },\n\n            /**\n             * Set the current state of the running item.\n             * This should have the effect to restore the item state.\n             *\n             * @param {Object} state - the new state\n             * @param {boolean} [isInitialStateRestore] - state restoring or not\n             * @returns {itemRunner}\n             *\n             * @fires itemRunner#error if the state type doesn't match\n             */\n            setState: function(state, isInitialStateRestore = false) {\n                if (!_.isPlainObject(state)) {\n                    return this.trigger(\n                        'error',\n                        \"The item's state must be a JavaScript Plain Object: \" + typeof state + ' given'\n                    );\n                }\n\n                //the state will be applied only when the rendering is made\n                if (flow.render.done === false) {\n                    flow.render.pending.push(function() {\n                        this.setState(state, isInitialStateRestore);\n                    });\n                } else {\n                    if (_.isFunction(provider.setState)) {\n                        /**\n                         * Calls the provider's setState\n                         * @callback SetStateItemProvider\n                         * @param {Object} state -  the state to set\n                         */\n                        provider.setState.call(this, state, isInitialStateRestore);\n                    }\n                }\n                return this;\n            },\n\n\n            /**\n             * Get the item data.\n             *\n             * @returns {Object} the item's data\n             */\n            getData: function() {\n                return data;\n            },\n\n            /**\n             * Get the responses of the running item.\n             *\n             * @returns {Object} the item's responses\n             */\n            getResponses: function() {\n                var responses = {};\n                if (_.isFunction(provider.getResponses)) {\n                    /**\n                     * Calls the provider's getResponses\n                     * @callback GetResponsesItemProvider\n                     * @returns {Object} the responses\n                     */\n                    responses = provider.getResponses.call(this);\n                }\n                return responses;\n            },\n\n            /**\n             * Append the modalFeedbacks into the item and create queue of feedbacks that should be displayed to the user\n             *\n             * @param {Object|Array} feedbacks - all feedbacks of the item\n             * @param {Object|Array} itemSession - determine feedbacks which should be displayed\n             * @param {function} done(renderingQueue) - runs after loading feedbacks into the item\n             *      # have parameter {Object|Array} renderingQueue with prepared queue of the feedbacks for displaying to the user\n             *\n             *\n             * Example:\n             *\n             *    this.renderFeedbacks({f1: 'feedback1', f2: 'feedback2', f3: 'feedback3'}, ['f2'], function(renderingQueue){\n             *      renderingQueue; // {'feedback2'}\n             *    });\n             */\n            renderFeedbacks: function renderFeedbacks(feedbacks, itemSession, done) {\n                if (_.isFunction(provider.renderFeedbacks)) {\n                    provider.renderFeedbacks.call(this, feedbacks, itemSession, done);\n                }\n            }\n        });\n    };\n\n    /**\n     * Register an <i>Item Runtime Provider</i> into the item runner.\n     * The provider provides the behavior required by the item runner.\n     *\n     * @param {String} name - the provider name will be used to select the provider while instantiating the runner\n     *\n     * @param {Object} provider - the Item Runtime Provider as a plain object. The itemRunner forwards encapsulate and delegate calls to the provider.\n     * @param {InitItemProvider} provider.init - the provider initializes the item from it's data, for example loading libraries, add some listeners, etc.\n     * @param {RenderItemProvider} provider.render - the provider renders the item within the given container element.\n     * @param {ClearItemProvider} [provider.clear] - the provider clears the item.\n     * @param {GetStateItemProvider} [provider.getState] - the provider get the item's state.\n     * @param {SetStateItemProvider} [provider.setState] - the provider restore the item to the given state.\n     * @param {GetRespnsesItemProvider} [provider.getResponses] - the provider gives the current responses.\n     *\n     * @throws TypeError when a wrong provider is given or an empty name.\n     */\n    itemRunnerFactory.register = function registerProvider(name, provider) {\n        //type checking\n        if (!_.isString(name) || name.length <= 0) {\n            throw new TypeError('It is required to give a name to your provider.');\n        }\n        if (!_.isPlainObject(provider) || (!_.isFunction(provider.init) && !_.isFunction(provider.render))) {\n            throw new TypeError('A provider is an object that contains at least an init function or a render function.');\n        }\n\n        this.providers = this.providers || {};\n        this.providers[name] = provider;\n    };\n\n    return itemRunnerFactory;\n\n});\n\n","\ndefine(\"taoItems/loader/taoItemsRunner.bundle\", function(){});\n"]}